/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package compilador;

import Arbol.Arbol;
import ListaDinamica.TDAToken;
import automatas.Lexico;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Stack;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Frank
 */
public class GUICompilador extends javax.swing.JFrame {
    Utils utils =new Utils();
    String cadEntrada="";
    int errorSin=0;
    //Lista_desordenada lista = new Lista_desordenada();
    DefaultTableModel tabla = new DefaultTableModel();
   // Lexico lexico;
    /**
     * Creates new form GUICompilador
     */
    public GUICompilador() {
        initComponents();
        
        tabla.addColumn("Llave");
        tabla.addColumn("Categoria");
        tabla.addColumn("Tipo");
        tabla.addColumn("Longitud");
        tabla.addColumn("Valor");
        jTable.setModel(tabla);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        JTAPrompt = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextErrores = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextOut = new javax.swing.JTextArea();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextPila = new javax.swing.JTextArea();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTextEntrada = new javax.swing.JTextArea();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTextoutS = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItemCompilar = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        JTAPrompt.setColumns(20);
        JTAPrompt.setRows(5);
        jScrollPane1.setViewportView(JTAPrompt);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Language Valyrio");

        jTable.setModel(tabla);
        jScrollPane2.setViewportView(jTable);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1024, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Tabla de Simbolos", jPanel2);

        jTextErrores.setEditable(false);
        jTextErrores.setColumns(20);
        jTextErrores.setRows(5);
        jScrollPane3.setViewportView(jTextErrores);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 1024, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Errores", jPanel3);

        jTextOut.setEditable(false);
        jTextOut.setColumns(20);
        jTextOut.setRows(5);
        jScrollPane4.setViewportView(jTextOut);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 1024, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Output", jPanel1);

        jTextPila.setEditable(false);
        jTextPila.setColumns(20);
        jTextPila.setRows(5);
        jScrollPane5.setViewportView(jTextPila);

        jTextEntrada.setEditable(false);
        jTextEntrada.setColumns(20);
        jTextEntrada.setRows(5);
        jScrollPane6.setViewportView(jTextEntrada);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 504, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 510, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE)
            .addComponent(jScrollPane6)
        );

        jTabbedPane1.addTab("Validar Cadenas", jPanel4);

        jTextoutS.setEditable(false);
        jTextoutS.setColumns(20);
        jTextoutS.setRows(5);
        jScrollPane7.setViewportView(jTextoutS);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 1024, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("OutputS", jPanel5);

        jMenu1.setText("Run");

        jMenuItemCompilar.setText("Compilar");
        jMenuItemCompilar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCompilarActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemCompilar);

        jMenuItem1.setText("Validar");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Help");

        jMenuItem2.setText("AcercaDe");
        jMenu2.add(jMenuItem2);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTabbedPane1)
                    .addComponent(jScrollPane1))
                .addContainerGap(34, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(494, 494, 494))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTabbedPane1))
        );

        jTabbedPane1.getAccessibleContext().setAccessibleName("Output");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemCompilarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCompilarActionPerformed
         Lexico lexico = new Lexico();
        cadEntrada="";
        String texto = JTAPrompt.getText(),delimitadores= "[\n]",resulOut="",resulSeman="",resulOutS="",resultErr="",clasificar,errSeman="",errfin="";
        //int conE=0,conUltimo;
        ArrayList tokens,declaraciones = new ArrayList(),identificadores = new ArrayList();
        String[] cadenasS,cadenas =texto.split(delimitadores);
        int conE=0,conUltimo=cadenas.length-1;
        
        for (int i = 0; i < cadenas.length; i++) 
        {
            tokens = new ArrayList();
            if(cadenas[i].contains("Dragon")||cadenas[i].contains("Moon")||cadenas[i].contains("Groat")||cadenas[i].contains("HalfGroat")||cadenas[i].contains("Stag"))   
                declaraciones.add(cadenas[i]);
                
            utils.separaTokens(cadenas[i], tokens);
            for (int j = 0; j < tokens.size(); j++) 
            {
            clasificar = lexico.clasificar((String) tokens.get(j));
           
                if(!clasificar.equals("COMEN"))
                {
                    resulOut+=clasificar+" ";
                    
                    if (clasificar.equals("ERROR")) 
                    {
                        cadEntrada+="id ";
                        conE++;
                    }
                    else
                        cadEntrada+=clasificar+" ";
                }
                //La siguiente parte se movio dentro de if(!clasificar.equals("COMEN")) para cambiar la palabra ERROR por id y que se pueda hacer el analisis sintactico
                /*if (clasificar.equals("ERROR")) 
                {
                    conE++;
                }*/
            }
            
            
            if (conE>0) 
            {
                String Err;
                if(conE==1)
                {
                    Err=conE+" Error Lexico linea " +(i+1);
                }else
                {
                    Err=conE+" Errores Lexicos linea " +(i+1);
                }
                
                resultErr+=Err+"\n";
                conE=0;
            }
            
            resulOut+="\n";
            if(conUltimo!=i)
                cadEntrada+="Del ";
        }
        //*for para asiganr el tipo a los id y verificar que no exista doble declaraciones
        for (int i = 0; i < declaraciones.size(); i++) 
        {
            lexico.examinarDeclaracion((String) declaraciones.get(i));
            
            String cad=(String) declaraciones.get(i);
            String [] tok=cad.split(" ");
            for (int j = 0; j < tok.length; j++) 
            {
                String id=lexico.clasificar(tok[j]);
                if(id.equals("id"))
                {
                    if (!identificadores.contains(tok[j])) 
                        identificadores.add(tok[j]);
                    else
                        errSeman+="\nError Semantico Identificador "+tok[j]+" declarado previamente";
                    
                }
                 
            }
            
        }
        // for para la creacion de salida semantica
        for (int i = 0; i < cadenas.length; i++) {
            tokens = new ArrayList();                
            utils.separaTokens(cadenas[i], tokens);
            for (int j = 0; j < tokens.size(); j++) 
            {
            clasificar = lexico.clasificar2((String) tokens.get(j));
           
                if(!clasificar.equals("COMEN"))
                {
                    if(!clasificar.equals("id"))
                        resulSeman+=clasificar+" ";
                    else
                    {
                        TDAToken tokenIden = new TDAToken();
                        tokenIden.llave = (String) tokens.get(j);
                        if(lexico.tablaSimbolos.buscar(tokenIden).info.tipo!=null)
                            resulSeman+=lexico.tablaSimbolos.buscar(tokenIden).info.tipo+" ";
                        else
                        {
                            resulSeman+="null"+" ";
                            errSeman+="\nError Semantico id "+(String) tokens.get(j)+" no declarado en linea "+(i+1);
                        }
                    }
                    
                }
            }
            resulSeman+="\n";
        }
        // for para marcar lineas necesarias para revision semantica
        cadenasS =resulSeman.split(delimitadores);
        jTextErrores.setText(resultErr);
        this.validacionSintactica();
        System.out.println("error"+errorSin);
        for (int i = 0; i < cadenasS.length; i++) 
        {   //if para revisar si cadena no ontiene identificador no declarado
            if(!cadenasS[i].contains("null")&&i!=(errorSin-1))
            {    
                if (cadenasS[i].contains("Opa")||cadenasS[i].contains("opari")||cadenasS[i].contains("oprel")) 
                    resulOutS+="@ "+cadenasS[i];
                else
                    resulOutS+=cadenasS[i];
            }else
                resulOutS+=cadenasS[i];
        resulOutS+="\n";
        }
        jTextoutS.setText(resulOutS);
        
      
        
        lexico.tablaSimbolos.limpiarTabla(tabla); /* limpia contenido previo de defaulftable model */
        lexico.tablaSimbolos.llenarTabla(tabla);/* asigan los valores de la lista al modelo que se asigna al jtable*/
         
        
        jTextOut.setText(resulOut);
        
        
        errfin=jTextErrores.getText();
        errfin+=errSeman;
        //agregar salto de linea si no esta vacio
        
          //for para validacion semantica
        cadenasS = resulOutS.split(delimitadores);
        String resTipos = "", erroresTipos = "";
        for (int i=0 ; i<cadenasS.length ; i++) {
            //revisar cada una de las cadenas marcadas con @
            if (cadenasS[i].charAt(0) == '@') {
                resTipos = compatibilidadTipos(cadenasS[i]);
                if (!resTipos.equals("success"))
                    erroresTipos += "Error semantico: "+resTipos+" en linea "+(i+1)+"\n";
            }
        }
        
        
        
        if (!errfin.isEmpty())
            errfin+="\n";
        errfin+=erroresTipos;
        jTextErrores.setText(errfin);
        //jTextoutS.setText(resulOutS);
        //mensajes de para estado de ompilaion a traves del contenido de la cadena errfin
        
        if(errfin.isEmpty())
            JOptionPane.showMessageDialog(this, "Compilacion Exitosa");
        else
            JOptionPane.showMessageDialog(this, "Error al compilar");
    }//GEN-LAST:event_jMenuItemCompilarActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        
        //this.validacionSintactica();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUICompilador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUICompilador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUICompilador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUICompilador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUICompilador().setVisible(true);
            }
        });
        
    }
    public  void validacionSintactica()
    {
         //Variables para mostrar la pila y entrada en la consola
         String ent,sPila="",sEntrada=""; 
         //arreglo para las palabras de la cadena de entrada
         String [] aEnt;
         //contador de saltos de linea
         int conDel=1;
         //tabla de analisis sintactico
         HashMap<String,HashMap> NT = new HashMap<>();
         Stack<String> pila = new Stack<>();
         Stack<String> entrada = new Stack<>();
         utils.llenarTablaSintactica(NT);
         //ent=JOptionPane.showInputDialog("Introduzca cadena a evaluar");
         //ent=JTAPrompt.getText();
         //cadena de entrada producida en el analisis lexico
         ent=cadEntrada;
         aEnt=ent.split(" ");
         //incializar la pila y cadena de entrada con el simbolo $ y el simbolo de la produccion inicial
         entrada.push("$");
         pila.push("$");
         pila.push("Prog");
         int ii=aEnt.length-1;
         //ingresar los simbolos a la pila de entrada en forma invertida
         for (int i = 0; i < aEnt.length; i++) 
         {
             entrada.push(aEnt[ii]);
             ii--;
         }
         //mostrar el contenido de la pila y la entrada en consola
         sPila+=utils.mostrarPila(pila);
         sEntrada+=utils.mostrarEntrada(entrada);
         System.out.println(sPila+"");
         System.out.println(sEntrada+"");
         
         while(!entrada.empty())
         {
             if("$".equals(entrada.lastElement()) && "$".equals(pila.lastElement())) 
             {
                 //Si los ultimos elementos en la pila y la entrada son el simbolo $
                // JOptionPane.showMessageDialog(this,"Compilacion Exitosa");
                break;
             }else
             {
                 //si los elementos en la pila y la entrada coinciden, se eliminan de ambas
                 if(pila.lastElement().equals(entrada.lastElement()))
                 {
                     //contador para saltos de linea
                     if(entrada.lastElement().equals("Del"))
                         conDel++;
                     entrada.pop();
                     pila.pop();
                     //mostrar contenido de pila y entrada a consola
                     sPila+=utils.mostrarPila(pila);
                     sEntrada+=utils.mostrarEntrada(entrada);
                     System.out.println(sPila+"");
                     System.out.println(sEntrada+"");

                 }else
                 {

                     //si existe un cruce en la tabla para el no terminal de la pila y el terminal de la entrada
                     if(utils.buscar(NT,pila.lastElement(),entrada.lastElement()))
                     {

                         //se recupera la produccion de la tabla sintactica
                         String cruce = utils.getCruce(NT,pila.lastElement(),entrada.lastElement());
                         //si la produccion no es el simbolo vacio e
                         if(!cruce.equals("e"))
                         {
                            //se elimina el simbolo de mas arriba de la pila
                            pila.pop();
                            //se separa la produccion en espacios
                            String [] aCruce =cruce.split(" ");
                            int j=aCruce.length-1;
                            //se ingresa a la pila de forma inversa
                            for (int i = 0; i < aCruce.length; i++) {
                                pila.push(aCruce[j]);
                                j--;
                            }
                            //mostrar contenidos en consola
                            sPila+=utils.mostrarPila(pila);
                            sEntrada+=utils.mostrarEntrada(entrada);
                            System.out.println(sPila+"");
                            System.out.println(sEntrada+"");
                         }else
                         {
                            //si la produccion es el simbolo vacio e
                            //se elimina el simbolo mas arriba en la pila
                            pila.pop();
                            //mostrar contenidos en consola
                            sPila+=utils.mostrarPila(pila);
                            sEntrada+=utils.mostrarEntrada(entrada);
                            System.out.println(sPila+"");
                            System.out.println(sEntrada+"");
                         }

                     }
                     else
                     {   
                         //si no existe un cruce entre el simbolo no terminal de la pila y el terminal de la entrada
                         //JOptionPane.showMessageDialog(this,"Error al compilar");
                         String stErr=jTextErrores.getText();
                         stErr+="\nError sintactico linea "+conDel;
                         errorSin=conDel;
                         jTextErrores.setText(stErr);

                         break;
                     }
                 }
             }

         }
         //mostrar todos los movimientos de la pila y la entrada en la interfaz de usuario 
         jTextPila.setText(sPila);
         jTextEntrada.setText(sEntrada);
    }
    
    /************************************************************/
    public  void validacionSintacticav2()
    {           
             String ent,sPila="",sEntrada="",stErr=""; 
             String [] aEnt;
             int conDel=1;
             Boolean banError=false;
             HashMap<String,HashMap> NT = new HashMap<>();
             Stack<String> pila = new Stack<>();
             Stack<String> entrada = new Stack<>();
             utils.llenarTablaSintactica(NT);
             //ent=JOptionPane.showInputDialog("Introduzca cadena a evaluar");
             //ent=JTAPrompt.getText();
             ent=cadEntrada;
             aEnt=ent.split(" ");
             entrada.push("$");
             pila.push("$");
             pila.push("Prog");
             int ii=aEnt.length-1;
             for (int i = 0; i < aEnt.length; i++) 
             {
                 entrada.push(aEnt[ii]);
                 ii--;
                 
             }
             
             sPila+=utils.mostrarPila(pila);
             sEntrada+=utils.mostrarEntrada(entrada);
             System.out.println(sPila+"");
             System.out.println(sEntrada+"");
             while(!entrada.empty())
             {
                 if("$".equals(entrada.lastElement()) && "$".equals(pila.lastElement())) 
                 {
                    
                     //JOptionPane.showMessageDialog(this,"Compilacion Exitosa");
                    break;
                 }else
                 {
                     if(pila.lastElement().equals(entrada.lastElement()))
                     {
                         if(entrada.lastElement().equals("Del"))
                             conDel++;
                         entrada.pop();
                         pila.pop();
                         sPila+=utils.mostrarPila(pila);
                         sEntrada+=utils.mostrarEntrada(entrada);
                         System.out.println(sPila+"");
                         System.out.println(sEntrada+"");
                         
                     }else
                     {
                        
                         if(utils.buscar(NT,pila.lastElement(),entrada.lastElement()))
                         {
                             
                             String cruce = utils.getCruce(NT,pila.lastElement(),entrada.lastElement());
                             if(!cruce.equals("e"))
                             {
                                pila.pop();
                                String [] aCruce =cruce.split(" ");
                                int j=aCruce.length-1;
                                for (int i = 0; i < aCruce.length; i++) {
                                    pila.push(aCruce[j]);
                                    j--;
                                }
                             sPila+=utils.mostrarPila(pila);
                             sEntrada+=utils.mostrarEntrada(entrada);
                             System.out.println(sPila+"");
             System.out.println(sEntrada+"");
                             }else
                             {
                                 pila.pop();
                                 sPila+=utils.mostrarPila(pila);
                                 sEntrada+=utils.mostrarEntrada(entrada);
                                System.out.println(sPila+"");
                                System.out.println(sEntrada+"");
                             }
                             
                         }
                         else
                         {   banError=true; 
                             if(entrada.lastElement().equals("Del"))
                                conDel++;
                             
                             entrada.pop();
                             sPila+=utils.mostrarPila(pila);
                             sEntrada+=utils.mostrarEntrada(entrada);
                             System.out.println(sPila+"");
                             System.out.println(sEntrada+"");
                             stErr+="Error sintactico linea "+conDel+"\n";
                             
                            
                           
                         }
                     }
                 }
                 
             }
             if(!banError)
                 JOptionPane.showMessageDialog(this,"Compilacion Exitosa");
             else
                 JOptionPane.showMessageDialog(this,"Problemas al compilar");
             
             jTextErrores.setText(stErr);
             jTextPila.setText(sPila);
             jTextEntrada.setText(sEntrada);
    }
    
    /*********************************************************************************************************+
    |                                                                                                         |
    |                      Metodos utilizados en la validacion semantica                                      |
    |                                                                                                         |
    **********************************************************************************************************/
    
    /*
     * Recibe una sentencia que puede ser una asignacion con o sin operaciones aritmeticas,
     * una condición, un for o un while.
     * Devuelve success si los tipos son compatibles, de lo contrario devuelve la causa del error
    */
    public String compatibilidadTipos(String sentencia) {
            String resultado = "";
            //separar las palabras de la cadena en un arreglo
            String[] arrSentencia;
            arrSentencia = sentencia.split(" ");
            System.out.println("compatibilidadTipos segundo elemento de arrSentencia: "+arrSentencia[1]);
            //la primer palabra es @ la segunda puede ser if, for, while o un id
            //Determinar que tipo de sentencia es asignacion, if, for, while
            switch(arrSentencia[1]) {
                    case "if":
                            resultado = compatibilidadIf(arrSentencia);
                            break;
                    case "for":
                            resultado = compatibilidadFor(arrSentencia);
                            break;
                    case "while":
                            resultado = compatibilidadWhile(arrSentencia);
                            break;
                    default:
                            //asignacion
                            resultado = compatibilidadAsignacion(arrSentencia);
                            break;
            }

            return resultado;

    }
    
    /*
     * Devuelve success si la comprobacion fue exitosa, de lo contario devuelve la causa del error
    */
    public String compatibilidadIf(String[] arrSentencia) {
        //extraer la expresion entre el if y el operador relacional oprel
        ArrayList<String> expresion1 = new ArrayList();
        String actual = "", tipo1, tipo2;
        int indice = 2;
        System.out.println("++++++++++++++++++++++++++++");
        System.out.println("Compatibilidad If");
        System.out.println("++++++++++++++++++++++++++++");
        System.out.println("Elementos agregados a Expresion 1");
        while(!actual.equals("oprel")) {
            expresion1.add(arrSentencia[indice]);
            System.out.println(arrSentencia[indice]);
            indice++;
            actual = arrSentencia[indice];
        }
        
        //extraer la expresion entre oprel y then
        ArrayList<String> expresion2 = new ArrayList();
        indice++; //avanzar una palabra despues de oprel
        actual = arrSentencia[indice];
        System.out.println("Elementos agregados a Expresion 2");
        while(!actual.equals("then")) {
            expresion2.add(arrSentencia[indice]);
            System.out.println(arrSentencia[indice]);
            indice++;
            actual = arrSentencia[indice];
        }
        
        //obtener los tipos de las expresiones
        tipo1 = compatibilidadExpresion(expresion1);
        tipo2 = compatibilidadExpresion(expresion2);
        
        //comparar los tipos devueltos
        if (tipo1.equals("error") || tipo2.equals("error"))
            return "operacion invalida con variable de tipo cadena";
        else if (tipo1.equals("cad") || tipo2.equals("cad"))
            return "no se permiten cadenas en las condiciones";
        else
            return "success";
    }
    
    /*
     * Devuelve success si la comprobacion fue exitosa, de lo contario devuelve la causa del error
    */
    public String compatibilidadFor(String[] arrSentencia) {
        /*
         * Asignacion
        */
        //obtener el tipo del id en la asignacion
        String tipoAsignacion = arrSentencia[3];
        if (tipoAsignacion.equals("Dragon"))
            return "no se permiten cadenas para controlar un ciclo for";
        
        //extraer la expresion entre Opa y ;
        ArrayList<String> expresionAsig = new ArrayList();
        String actual = "", tipoAsig;
        int indice = 4;
        System.out.println("++++++++++++++++++++++++++++");
        System.out.println("Compatibilidad For");
        System.out.println("++++++++++++++++++++++++++++");
        System.out.println("Elementos agregados a Expresion Asignacion");
        while(!actual.equals(";")) {
            expresionAsig.add(arrSentencia[indice]);
            System.out.println(arrSentencia[indice]);
            indice++;
            actual = arrSentencia[indice];
        }
        
        //obtener el tipo de la expresion de la asignacion
        tipoAsig = compatibilidadExpresion(expresionAsig);
        
        //comparar los tipos devueltos
        if (tipoAsig.equals("error"))
            return "operacion invalida con variable de tipo cadena";
        else if (tipoAsig.equals("cad"))
            return "no se permiten cadenas para controlar un ciclo for";
        
        
        /*
         * Condicion
        */
        //extraer la expresion condicional entre ; y ;
        ArrayList<String> expresion1 = new ArrayList();
        String tipo1, tipo2;
        indice++; //avanzar una palabra despues de ;
        System.out.println("Elementos agregados a Expresion 1 de condicion");
        while(!actual.equals("oprel")) {
            expresion1.add(arrSentencia[indice]);
            System.out.println(arrSentencia[indice]);
            indice++;
            actual = arrSentencia[indice];
        }
        
        //extraer la expresion entre oprel y ;
        ArrayList<String> expresion2 = new ArrayList();
        indice++; //avanzar una palabra despues de oprel
        actual = arrSentencia[indice];
        System.out.println("Elementos agregados a Expresion 2 de condicion");
        while(!actual.equals(";")) {
            expresion2.add(arrSentencia[indice]);
            System.out.println(arrSentencia[indice]);
            indice++;
            actual = arrSentencia[indice];
        }
        
        //obtener los tipos de las expresiones
        tipo1 = compatibilidadExpresion(expresion1);
        tipo2 = compatibilidadExpresion(expresion2);
        
        //comparar los tipos devueltos
        if (tipo1.equals("error") || tipo2.equals("error"))
            return "operacion invalida con variable de tipo cadena";
        else if (tipo1.equals("cad") || tipo2.equals("cad"))
            return "no se permiten cadenas en las condiciones";
        
        
        /*
         * Incremento
        */
        //obtener el tipo del id en el incremento
        indice++; //avanzar el indice una palabra despues de ;
        String tipoIncremento = arrSentencia[indice];
        if (tipoIncremento.equals("Dragon"))
            return "no se permiten cadenas para controlar un ciclo for";
        
        //avanzar el indice a la primer palabra de la expresion de incremento
        indice+=2;
        
        //extraer la expresion entre Opa y el final de la cadena
        ArrayList<String> expresionInc = new ArrayList();
        String tipoInc;
        System.out.println("Elementos agregados a Expresion Incremento");
        while(indice < arrSentencia.length) {
            expresionInc.add(arrSentencia[indice]);
            System.out.println(arrSentencia[indice]);
            indice++;
        }
        
        //obtener el tipo de la expresion del incremento
        tipoInc = compatibilidadExpresion(expresionInc);
        
        //comparar los tipos devueltos
        if (tipoInc.equals("error"))
            return "operacion invalida con variable de tipo cadena";
        else if (tipoInc.equals("cad"))
            return "no se permiten cadenas para controlar un ciclo for";
        
        //si no hubo error hasta esta parte devolver success
        return "success";
    }
    
    /*
     * Devuelve success si la comprobacion fue exitosa, de lo contario devuelve la causa del error
    */
    public String compatibilidadWhile(String[] arrSentencia) {
        //extraer la expresion entre el while y el operador relacional oprel
        ArrayList<String> expresion1 = new ArrayList();
        String actual = "", tipo1, tipo2;
        int indice = 2;
        System.out.println("++++++++++++++++++++++++++++");
        System.out.println("Compatibilidad While");
        System.out.println("++++++++++++++++++++++++++++");
        System.out.println("Elementos agregados a Expresion 1");
        while(!actual.equals("oprel")) {
            expresion1.add(arrSentencia[indice]);
            System.out.println(arrSentencia[indice]);
            indice++;
            actual = arrSentencia[indice];
        }
        
        //extraer la expresion entre oprel y el final de la cadena
        ArrayList<String> expresion2 = new ArrayList();
        indice++; //avanzar una palabra despues de oprel
        System.out.println("Elementos agregados a Expresion 2");
        while(indice < arrSentencia.length) {
            expresion2.add(arrSentencia[indice]);
            System.out.println(arrSentencia[indice]);
            indice++;
        }
        
        //obtener los tipos de las expresiones
        tipo1 = compatibilidadExpresion(expresion1);
        tipo2 = compatibilidadExpresion(expresion2);
        
        //comparar los tipos devueltos
        if (tipo1.equals("error") || tipo2.equals("error"))
            return "operacion invalida con variable de tipo cadena";
        else if (tipo1.equals("cad") || tipo2.equals("cad"))
            return "no se permiten cadenas en las condiciones";
        else
            return "success";
    }

    /*
     * Devuelve success si la comprobacion fue exitosa, de lo contario devuelve la causa del error
    */
    public String compatibilidadAsignacion(String[] arrSentencia) {
            //guardar el tipo del id al que se le hace la asignacion
            String tipo = arrSentencia[1];
            //si el tipo es una cadena revisar que se le asigne una cadena
            if (tipo.equals("Dragon")) {
                    //El tipo de lo que se asigna debe ser una sola cadena
                    if (arrSentencia[3].equals("cad") || arrSentencia[3].equals("Dragon"))
                            return "success";
                    else
                            return "Se trata de asignar un valor que no es cadena";
            }
            else {
                    //si no es cadena entonces es una expresion (expresion engloba un solo numero o identificador)
                    //Separar la parte de la sentencia que es la expresion
                    ArrayList arrExpresion = new ArrayList();
                    for (int i=3 ; i<arrSentencia.length ; i++) {
                            arrExpresion.add(arrSentencia[i]);
                    }
                    //llamar a la funcion que revisa la compatibilidad en una expresion
                    String resultadoExpresion = compatibilidadExpresion(arrExpresion);
                    switch(resultadoExpresion) {
                            case "error":
                                    return "operacion invalida con variable de tipo cadena";
                                    //break;
                            case "cad":
                                    if (tipo.equals("Dragon"))
                                            return "success";
                                    else
                                            return "Se trata de asignar una cadena a una variable que no lo es";
                                    //break;
                            case "real":
                                    if (tipo.equals("Groat") || tipo.equals("HalfGroat"))
                                            return "success";
                                    else
                                            return "Se trata de asignar un numero real a una variable que no lo es";
                                    //break;
                            case "entero":
                                    if (tipo.equals("Moon"))
                                            return "success";
                                    else
                                            return "Se trata de asignar un numero entero a una variable que no lo es";
                                    //break;
                            default:
                                    return "Error al comprobar el tipo de una asignacion";
                                    //break;
                    }
            }
    }

    /*
     * Devuelve el tipo final de la expresion, de lo contrario devuelve la cadena error
    */
    public String compatibilidadExpresion(ArrayList<String> arrExpresion) {
            //instanciar el arbol
            Arbol arbolExpresion = new Arbol();
            //insertar la expresion en el arbol
            arbolExpresion.insertar(arrExpresion);
            //determinar el tipo final de la expresion
            String resultado = arbolExpresion.determinarTipo();
            return resultado;
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea JTAPrompt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItemCompilar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable;
    private javax.swing.JTextArea jTextEntrada;
    private javax.swing.JTextArea jTextErrores;
    private javax.swing.JTextArea jTextOut;
    private javax.swing.JTextArea jTextPila;
    private javax.swing.JTextArea jTextoutS;
    // End of variables declaration//GEN-END:variables
}
